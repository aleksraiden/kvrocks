# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: CI

on: [push, pull_request]

# Concurrency strategy:
#   github.workflow: distinguish this workflow from others
#   github.event_name: distinguish `push` event from `pull_request` event
#   github.event.number: set to the number of the pull request if `pull_request` event
#   github.run_id: otherwise, it's a `push` event, only cancel if we rerun the workflow
#
# Reference:
#   https://docs.github.com/en/actions/using-jobs/using-concurrency
#   https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  precondition:
    name: Precondition
    runs-on: ubuntu-22.04
    outputs:
      docs_only: ${{ steps.result.outputs.docs_only }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          filters: .github/config/changes.yml
          list-files: csv
      - name: Calculate changes
        id: result
        run: |
          echo "docs_only=${{ fromJSON(steps.changes.outputs.all_count) == fromJSON(steps.changes.outputs.docs_count) && fromJSON(steps.changes.outputs.docs_count) > 0 }}" >> $GITHUB_OUTPUT

  check-typos:
    name: Check typos
    runs-on: ubuntu-22.04
    env:
      FORCE_COLOR: 1
    steps:
      - uses: actions/checkout@v4
      - name: Install typos
        run: curl -LsSf https://github.com/crate-ci/typos/releases/download/v1.18.2/typos-v1.18.2-x86_64-unknown-linux-musl.tar.gz | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin
      - name: Run typos check
        run: typos --config .github/config/typos.toml

  check-and-lint:
    name: Lint and check code
    needs: [precondition]
    if: ${{ needs.precondition.outputs.docs_only != 'true' }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'tests/gocase/go.mod'
          cache: false
      - name: Prepare Dependencies
        run: |
          sudo apt update
      - uses: apache/skywalking-eyes/header@v0.6.0
        with:
          config: .github/config/licenserc.yml
      

  check-docker:
    name: Check Docker image
    needs: [precondition, check-and-lint, check-typos]
    if: ${{ needs.precondition.outputs.docs_only != 'true' }}
    runs-on: ubuntu-24.04
    steps:
      - name: Update all
        run: sudo apt-get update -y && sudo apt install unattended-upgrades
      - uses: actions/checkout@v4
      - name: Get core numbers
        run: echo "NPROC=$(nproc)" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          build-args: MORE_BUILD_ARGS=-j${{ env.NPROC }}
          push: false
          tags: kvrocks:ci
          outputs: type=docker
      - name: Test built image
        run: |
          docker run --rm kvrocks:ci -v
          ID="$(docker run --rm -d -p 6666:6666 kvrocks:ci)"
          sleep 1m
          if [ "$(docker inspect --format='{{.State.Health.Status}}' $ID)" != "healthy" ]; then
            echo "The container is not healthy."
            exit 1
          fi
          if [ "$(ss --listening --no-header --tcp '( sport = :6666 )')" == "" ]; then
            echo "The container listening port can not be accessed from outside."
            exit 1
          fi
          docker stop $ID

  build-and-test-in-container:
    name: Build and test in container
    needs: [precondition, check-and-lint, check-typos]
    if: ${{ needs.precondition.outputs.docs_only != 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: CentOS 7
            image: centos:7
            compiler: gcc
          - name: openSUSE Leap 15
            image: opensuse/leap:15
            compiler: gcc
          - name: ArchLinux
            image: archlinux:base
            compiler: gcc

    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.image }}
    steps:
      - name: Setup CentOS
        if: ${{ startsWith(matrix.image, 'centos') }}
        run: |
          yum upgrade -y
          yum install -y centos-release-scl-rh
          yum install -y devtoolset-11 python3 python3-pip autoconf automake wget git gcc gcc-c++
          echo "NPROC=$(nproc)" >> $GITHUB_ENV
          mv /usr/bin/gcc /usr/bin/gcc-4.8.5
          ln -s /opt/rh/devtoolset-11/root/bin/gcc /usr/bin/gcc
          mv /usr/bin/g++ /usr/bin/g++-4.8.5
          ln -s /opt/rh/devtoolset-11/root/bin/g++ /usr/bin/g++
          yum clean all

      - name: Setup ArchLinux
        if: ${{ startsWith(matrix.image, 'archlinux') }}
        run: |
          pacman -Syu --noconfirm
          pacman -Sy --noconfirm autoconf automake python3 python-redis git wget which cmake make gcc
          echo "NPROC=$(nproc)" >> $GITHUB_ENV

      - name: Setup openSUSE
        if: ${{ startsWith(matrix.image, 'opensuse') }}
        run: |
          zypper up -y
          zypper install -y gcc11 gcc11-c++ make wget git autoconf automake python3 python3-pip curl tar gzip cmake go
          update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-11 100
          update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-11 100
          update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
          echo "NPROC=$(nproc)" >> $GITHUB_ENV

      - name: Cache redis
        id: cache-redis
        uses: actions/cache@v3
        with:
          path: |
            ~/local/bin/redis-cli
          key: ${{ matrix.image }}-redis-cli

      - name: Cache redis server
        id: cache-redis-server
        uses: actions/cache@v3
        with:
          path: |
            ~/local/bin/redis-server
          key: ${{ matrix.image }}-redis-server

      - name: Install redis
        if: ${{ steps.cache-redis.outputs.cache-hit != 'true' || steps.cache-redis-server.outputs.cache-hit != 'true' }}
        run: |
          curl -O https://download.redis.io/releases/redis-6.2.14.tar.gz
          tar -xzvf redis-6.2.14.tar.gz
          mkdir -p $HOME/local/bin
          pushd redis-6.2.14 && USE_JEMALLOC=no make -j$NPROC redis-cli && mv src/redis-cli $HOME/local/bin/ && popd
          pushd redis-6.2.14 && USE_JEMALLOC=no make -j$NPROC redis-server && mv src/redis-server $HOME/local/bin/ && popd

      - name: Install cmake
        if: ${{ startsWith(matrix.image, 'centos') }}
        run: |
          VERSION=3.26.4
          wget https://github.com/Kitware/CMake/releases/download/v$VERSION/cmake-$VERSION-linux-x86_64.sh
          bash cmake-$VERSION-linux-x86_64.sh --skip-license --prefix=/usr

      - uses: actions/checkout@v3 #v4 use Node 20 and not working at CentOS 7
      - uses: actions/setup-go@v4 #v5 use Node 20 too
        if: ${{ !startsWith(matrix.image, 'opensuse') }}
        with:
          go-version-file: 'tests/gocase/go.mod'
          cache: false

      - name: Build Kvrocks
        run: |
          ./x.py build -j$NPROC --unittest --compiler ${{ matrix.compiler }}

      - name: Run Unit Test
        run: |
          ./x.py test cpp

      - name: Run Go Integration Cases
        run: |
          export PATH=$PATH:$HOME/local/bin/
          GOCASE_RUN_ARGS=""
          ./x.py test go build $GOCASE_RUN_ARGS

      - name: Install redis-py
        if: ${{ !startsWith(matrix.image, 'archlinux') }}  # already installed
        run: pip3 install redis==4.3.6

      - name: Run kvrocks2redis Test
        run: |
          $HOME/local/bin/redis-server --daemonize yes
          mkdir -p kvrocks2redis-ci-data
          ./build/kvrocks --dir `pwd`/kvrocks2redis-ci-data --pidfile `pwd`/kvrocks.pid --daemonize yes
          sleep 10s
          echo -en "data-dir `pwd`/kvrocks2redis-ci-data\ndaemonize yes\noutput-dir ./\nnamespace.__namespace 127.0.0.1 6379\n" >> ./kvrocks2redis-ci.conf
          cat ./kvrocks2redis-ci.conf
          ./build/kvrocks2redis -c ./kvrocks2redis-ci.conf
          sleep 10s
          python3 utils/kvrocks2redis/tests/populate-kvrocks.py --password="" --flushdb=true
          sleep 10s
          python3 utils/kvrocks2redis/tests/check_consistency.py --src_password=""

  required:
    if: always()
    name: Required
    runs-on: ubuntu-latest
    needs:
      - precondition
      - build-and-test-in-container
      - check-docker
    steps:
      - name: Merge requirement checking
        if: ${{ needs.precondition.outputs.docs_only != 'true' }}
        run: |
          if [[ ! ( \
                   "${{ needs.build-and-test.result }}" == "success" \
                && "${{ needs.build-and-test-in-container.result }}" == "success" \
                && "${{ needs.check-docker.result }}" == "success" \
               ) ]]; then
            echo "Required jobs haven't been completed successfully."
            exit 1
          fi
      - name: Sentinel
        run: true
